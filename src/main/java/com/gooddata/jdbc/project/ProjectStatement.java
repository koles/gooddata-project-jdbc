package com.gooddata.jdbc.project;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import com.gooddata.integration.rest.GdcRESTApiWrapper;

class ProjectStatement implements Statement {
	private final ProjectConnection connection;
	final GdcRESTApiWrapper gdc;
	
	private int maxFieldSize = -1;
	private int maxRows = -1;
	private boolean escapeEnabled = false;
	private int queryTimeout = -1;
	private ResultSet resultSet = null;
	private int updateCount = 0;
	private boolean moreResults = false;
	
	ProjectStatement(final ProjectConnection connection) {
		this.gdc = (this.connection = connection).gdc; // evil one-liner ;)
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}

	public ResultSet executeQuery(String sql) throws SQLException {
		return new ReportResultSet(this, sql);
	}

	public int executeUpdate(String sql) throws SQLException {
		throw new UnsupportedOperationException("Update is not supported");
	}

	public void close() throws SQLException {
	}

	public int getMaxFieldSize() throws SQLException {
		return maxFieldSize;
	}

	public void setMaxFieldSize(int max) throws SQLException {
		this.maxFieldSize = max;
	}

	public int getMaxRows() throws SQLException {
		return maxRows;
	}

	public void setMaxRows(int max) throws SQLException {
		this.maxFieldSize = max;
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		this.escapeEnabled = enable;
	}

	public int getQueryTimeout() throws SQLException {
		return queryTimeout;
	}

	public void setQueryTimeout(int seconds) throws SQLException {
		this.queryTimeout = seconds;
	}

	public void cancel() throws SQLException {
	}

	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	public void clearWarnings() throws SQLException {
	}

	public void setCursorName(String name) throws SQLException {
	}

	public boolean execute(String sql) throws SQLException {
		this.resultSet = executeQuery(sql);
		return true;
	}

	public ResultSet getResultSet() throws SQLException {
		return resultSet;
	}

	public int getUpdateCount() throws SQLException {
		return updateCount;
	}

	public boolean getMoreResults() throws SQLException {
		return moreResults;
	}

	public void setFetchDirection(int direction) throws SQLException {
	}

	public int getFetchDirection() throws SQLException {
		return ResultSet.FETCH_FORWARD;
	}

	public void setFetchSize(int rows) throws SQLException {
	}

	public int getFetchSize() throws SQLException {
		return 0;
	}

	public int getResultSetConcurrency() throws SQLException {
		return ResultSet.CONCUR_READ_ONLY;
	}

	public int getResultSetType() throws SQLException {
		return ResultSet.TYPE_FORWARD_ONLY;
	}

	public void addBatch(String sql) throws SQLException {
		throw new UnsupportedOperationException("Batches are not supported");
	}

	public void clearBatch() throws SQLException {
	}

	public int[] executeBatch() throws SQLException {
		throw new UnsupportedOperationException("Batches are not supported");
	}

	public Connection getConnection() throws SQLException {
		return connection;
	}

	public boolean getMoreResults(int current) throws SQLException {
		return moreResults;
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return new ReportResultSet(this);
	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public int getResultSetHoldability() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	public boolean isClosed() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub

	}

	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

}
